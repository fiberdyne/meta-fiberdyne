From 45b88347956046b1a75c791254609ca7becdb0bf Mon Sep 17 00:00:00 2001
From: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
Date: Wed, 20 Apr 2016 17:52:12 +0300
Subject: [PATCH] ASoC: PCM3168A: merge ADC and DAC to single DAI


Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 sound/soc/codecs/pcm3168a.c |  151 +++++++++++++++++++++----------------------
 1 file changed, 72 insertions(+), 79 deletions(-)

diff --git a/sound/soc/codecs/pcm3168a.c b/sound/soc/codecs/pcm3168a.c
index 719eca1..e1b5feb 100644
--- a/sound/soc/codecs/pcm3168a.c
+++ b/sound/soc/codecs/pcm3168a.c
@@ -57,8 +57,7 @@ struct pcm3168a_priv {
 	struct regulator_bulk_data supplies[PCM3168A_NUM_SUPPLIES];
 	struct regmap *regmap;
 	struct clk *scki;
-	bool adc_master_mode;
-	bool dac_master_mode;
+	bool master_mode;
 	unsigned int tdm;
 	unsigned int slots;
 	unsigned int slot_width;
@@ -343,7 +342,7 @@ int format_table[3][6] = {
 		[SND_SOC_DAIFMT_DSP_B]		= -1},
 };

-static int pcm3168a_set_dai_fmt(struct snd_soc_dai *dai,
+static int __pcm3168a_set_dai_fmt(struct snd_soc_dai *dai,
 			       unsigned int format, bool dac)
 {
 	struct snd_soc_codec *codec = dai->codec;
@@ -392,31 +391,32 @@ static int pcm3168a_set_dai_fmt(struct snd_soc_dai *dai,
 		reg = PCM3168A_DAC_PWR_MST_FMT;
 		mask = PCM3168A_DAC_FMT_MASK;
 		shift = PCM3168A_DAC_FMT_SHIFT;
-		pcm3168a->dac_master_mode = master_mode;
 		pcm3168a->dac_fmt = fmt;
 	} else {
 		reg = PCM3168A_ADC_MST_FMT;
 		mask = PCM3168A_ADC_FMTAD_MASK;
 		shift = PCM3168A_ADC_FMTAD_SHIFT;
-		pcm3168a->adc_master_mode = master_mode;
 		pcm3168a->adc_fmt = fmt;
 	}

+	pcm3168a->master_mode = master_mode;
+
 	regmap_update_bits(pcm3168a->regmap, reg, mask, fmt << shift);

 	return 0;
 }

-static int pcm3168a_set_dai_fmt_dac(struct snd_soc_dai *dai,
+static int pcm3168a_set_dai_fmt(struct snd_soc_dai *dai,
 			       unsigned int format)
 {
-	return pcm3168a_set_dai_fmt(dai, format, true);
-}
+	int ret;

-static int pcm3168a_set_dai_fmt_adc(struct snd_soc_dai *dai,
-			       unsigned int format)
-{
-	return pcm3168a_set_dai_fmt(dai, format, false);
+	/* dac */
+	ret = __pcm3168a_set_dai_fmt(dai, format, false);
+	if (ret)
+		return ret;
+	/* adc */
+	return __pcm3168a_set_dai_fmt(dai, format, true);
 }

 static int pcm3168a_hw_params(struct snd_pcm_substream *substream,
@@ -426,7 +426,7 @@ static int pcm3168a_hw_params(struct snd_pcm_substream *substream,
 	int bits;
 	struct snd_soc_codec *codec = dai->codec;
 	struct pcm3168a_priv *pcm3168a = snd_soc_codec_get_drvdata(codec);
-	bool tx, master_mode;
+	bool tx;
 	u32 val, mask, shift, reg;
 	u32 sample_rate = 0; /* auto */
 	unsigned int rate, channels, fmt, ratio, max_ratio;
@@ -440,33 +440,28 @@ static int pcm3168a_hw_params(struct snd_pcm_substream *substream,

 	tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;

-	ratio = pcm3168a->sysclk / rate;
-
-	tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
 	if (tx) {
 		max_ratio = PCM3168A_NUM_SCKI_RATIOS_DAC;
-		reg = PCM3168A_DAC_PWR_MST_FMT;
-		mask = PCM3168A_DAC_MSDA_MASK;
-		shift = PCM3168A_DAC_MSDA_SHIFT;
-		master_mode = pcm3168a->dac_master_mode;
 		fmt = pcm3168a->dac_fmt;
 	} else {
 		max_ratio = PCM3168A_NUM_SCKI_RATIOS_ADC;
-		reg = PCM3168A_ADC_MST_FMT;
-		mask = PCM3168A_ADC_MSAD_MASK;
-		shift = PCM3168A_ADC_MSAD_SHIFT;
-		master_mode = pcm3168a->adc_master_mode;
 		fmt = pcm3168a->adc_fmt;
 	}

-	for (i = 0; i < max_ratio; i++) {
-		if (pcm3168a_scki_ratios[i] == ratio)
-			break;
-	}
+	if (pcm3168a->master_mode) {
+		ratio = pcm3168a->sysclk / rate;
+		for (i = 0; i < max_ratio; i++)
+			if (pcm3168a_scki_ratios[i] == ratio)
+				break;

-	if (i == max_ratio) {
-		dev_err(codec->dev, "unsupported sysclk ratio\n");
-		return -EINVAL;
+		if (i == max_ratio) {
+			dev_err(codec->dev, "unsupported sysclk ratio: %d\n", ratio);
+			return -EINVAL;
+		}
+		val = i + 1;
+	} else {
+		/* slave mode */
+		val = 0;
 	}

 	if (pcm3168a->tdm == TDM_MODE_NONE) {
@@ -474,14 +469,15 @@ static int pcm3168a_hw_params(struct snd_pcm_substream *substream,
 		min_frame_size = bits * 2;
 		switch (min_frame_size) {
 		case 32:
-			if (master_mode || (fmt != PCM3168A_FMT_RIGHT_J)) {
+			if (pcm3168a->master_mode ||
+				(fmt != PCM3168A_FMT_RIGHT_J)) {
 				dev_err(codec->dev, "32-bit frames are supported only for slave mode using right justified\n");
 				return -EINVAL;
 			}
 			fmt = PCM3168A_FMT_RIGHT_J_16;
 			break;
 		case 48:
-			if (master_mode ||
+			if (pcm3168a->master_mode ||
 				(fmt == PCM3168A_FMT_DSP_A) ||
 				(fmt == PCM3168A_FMT_DSP_B)) {
 				dev_err(codec->dev, "48-bit frames not supported in master mode, or slave mode using DSP\n");
@@ -514,26 +510,30 @@ static int pcm3168a_hw_params(struct snd_pcm_substream *substream,
 		}
 	}

-	if (master_mode)
-		val = ((i + 1) << shift);
-	else
+	/* Setup ADC in master mode, couse it drives ADC */
+	if ((pcm3168a->master_mode) || (tx)) {
+		fmt = pcm3168a->dac_fmt;
+		reg = PCM3168A_DAC_PWR_MST_FMT;
+		mask = PCM3168A_DAC_MSDA_MASK | PCM3168A_DAC_FMT_MASK;
+		shift = PCM3168A_DAC_MSDA_SHIFT;
+		/* start DAC */
+		regmap_update_bits(pcm3168a->regmap, reg, mask, (val << shift) | fmt);
+	}
+	/* Do we need also ADC? */
+	if (!tx) {
+		fmt = pcm3168a->adc_fmt;
+		reg = PCM3168A_ADC_MST_FMT;
+		mask = PCM3168A_ADC_MSAD_MASK | PCM3168A_ADC_FMTAD_MASK;
+		shift = PCM3168A_ADC_MSAD_SHIFT;
+		/* ADC slave mode only, driven by DAC or CPU DAI */
 		val = 0;
+		regmap_update_bits(pcm3168a->regmap, reg, mask, (val << shift) | fmt);
+	}

-	regmap_update_bits(pcm3168a->regmap, reg, mask, val);
 	regmap_update_bits(pcm3168a->regmap, PCM3168A_RST_SMODE,
 		PCM3168A_DAC_SRDA_MASK,
 		sample_rate << PCM3168A_DAC_SRDA_SHIFT);

-	if (tx) {
-		mask = PCM3168A_DAC_FMT_MASK;
-		shift = PCM3168A_DAC_FMT_SHIFT;
-	} else {
-		mask = PCM3168A_ADC_FMTAD_MASK;
-		shift = PCM3168A_ADC_FMTAD_SHIFT;
-	}
-
-	regmap_update_bits(pcm3168a->regmap, reg, mask, fmt << shift);
-
 	return 0;
 }

@@ -558,44 +558,32 @@ static int pcm3168a_set_tdm_slot(struct snd_soc_dai *dai,
 	return 0;
 }

-static const struct snd_soc_dai_ops pcm3168a_dac_dai_ops = {
-	.set_fmt	= pcm3168a_set_dai_fmt_dac,
+static const struct snd_soc_dai_ops pcm3168a_dai_ops = {
+	.set_fmt	= pcm3168a_set_dai_fmt,
 	.set_sysclk	= pcm3168a_set_dai_sysclk,
 	.set_tdm_slot	= pcm3168a_set_tdm_slot,
 	.hw_params	= pcm3168a_hw_params,
 	.digital_mute	= pcm3168a_digital_mute
 };

-static const struct snd_soc_dai_ops pcm3168a_adc_dai_ops = {
-	.set_fmt	= pcm3168a_set_dai_fmt_adc,
-	.set_sysclk	= pcm3168a_set_dai_sysclk,
-	.set_tdm_slot	= pcm3168a_set_tdm_slot,
-	.hw_params	= pcm3168a_hw_params
-};
-
-static struct snd_soc_dai_driver pcm3168a_dais[] = {
-	{
-		.name = "pcm3168a-dac",
-		.playback = {
-			.stream_name = "Playback",
-			.channels_min = 1,
-			.channels_max = 8,
-			.rates = SNDRV_PCM_RATE_8000_192000,
-			.formats = PCM3168A_FORMATS
-		},
-		.ops = &pcm3168a_dac_dai_ops
+static struct snd_soc_dai_driver pcm3168a_dai = {
+	.name = "pcm3168a",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 1,
+		.channels_max = 8,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = PCM3168A_FORMATS
 	},
-	{
-		.name = "pcm3168a-adc",
-		.capture = {
-			.stream_name = "Capture",
-			.channels_min = 1,
-			.channels_max = 6,
-			.rates = SNDRV_PCM_RATE_8000_96000,
-			.formats = PCM3168A_FORMATS
-		},
-		.ops = &pcm3168a_adc_dai_ops
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 1,
+		.channels_max = 8,
+		.rates = SNDRV_PCM_RATE_8000_96000,
+		.formats = PCM3168A_FORMATS
 	},
+	.ops = &pcm3168a_dai_ops,
+	.symmetric_rates = 1,
 };

 static const struct reg_default pcm3168a_reg_default[] = {
@@ -759,8 +747,13 @@ int pcm3168a_probe(struct device *dev, struct regmap *regmap)
 	pm_runtime_enable(dev);
 	pm_runtime_idle(dev);

-	ret = snd_soc_register_codec(dev, &pcm3168a_driver, pcm3168a_dais,
-			ARRAY_SIZE(pcm3168a_dais));
+	if (pcm3168a->tdm != TDM_MODE_NONE) {
+		pcm3168a_dai.playback.channels_min = 8;
+		pcm3168a_dai.capture.channels_min = 8;
+	}
+
+	ret = snd_soc_register_codec(dev, &pcm3168a_driver,
+					&pcm3168a_dai, 1);
 	if (ret) {
 		dev_err(dev, "failed to register codec: %d\n", ret);
 		goto err_regulator;
--
1.7.10.4
